"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()

AZURE_BLOB_STORAGE_CONNECT_KEY_FOR_FILE = os.getenv('AZURE_BLOB_STORAGE_CONNECT_KEY_FOR_FILE')
AZURE_BLOB_STORAGE_CONNECT_KEY_FOR_IMAGE = os.getenv('AZURE_BLOB_STORAGE_CONNECT_KEY_FOR_IMAGE')

AZURE_OPENAI_API_KEY = os.getenv("AZURE_OPENAI_API_KEY")
AZURE_OPENAI_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_VERSION = os.getenv("AZURE_OPENAI_VERSION")
AZURE_OPENAI_DEPLOYMENT = os.getenv("AZURE_OPENAI_DEPLOYMENT")

AZURE_OPENAI_DALLE_APIKEY = os.getenv("AZURE_OPENAI_DALLE_APIKEY")
AZURE_OPENAI_DALLE_ENDPOINT = os.getenv("AZURE_OPENAI_DALLE_ENDPOINT")
AZURE_OPENAI_DALLE_VERSION = os.getenv("AZURE_OPENAI_DALLE_VERSION")
AZURE_OPENAI_DALLE_DEPLOYMENT = os.getenv("AZURE_OPENAI_DALLE_DEPLOYMENT")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k-*jg-r+vkv5upy#3gqad1n_m2o&43@4p=b2fscd$xb^0r=!0w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

AUTH_USER_MODEL = 'accounts.Admin'

# CORS
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    'accounts',
    'chat',
    'game',
    'storymode',
    'user',
    'corsheaders',

    # djangorestframework-simplejwt
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# JWT
REST_USE_JWT = True
SIMPLE_JWT = {
    # access 토큰 유효시간
    'ACCESS_TOKEN_LIFETIME' : timedelta(minutes=15),
    # refresh 토큰 유효시간 timedelta
    'REFRESH_TOKEN_LIFETIME' : timedelta(minutes=15),    
    # refresh 토큰 갱신 시, 새 토큰 생성
    'ROTATE_REFRESH_TOKENS' : False,
    # 토큰 생성 후, 이전 토큰 블랙리스트에 추가
    'BLACKLIST_AFTER_ROTATION' : True
}

# RestFramework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES' : (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASE_USER = os.environ.get('DATABASE_USER')
DATABASE_PASSWORD = os.environ.get('DATABASE_PASSWORD')
DATABASE_HOST = os.environ.get('DATABASE_HOST')
DATABASE_PORT = os.environ.get('DATABASE_PORT')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME' : 'project_admin',
        'USER' : DATABASE_USER,
        'PASSWORD' : DATABASE_PASSWORD,
        'HOST' : DATABASE_HOST,
        'PORT' : DATABASE_PORT,
    },
    'test': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME' : 'project_test',
        'USER' : DATABASE_USER,
        'PASSWORD' : DATABASE_PASSWORD,
        'HOST' : DATABASE_HOST,
        'PORT' : DATABASE_PORT,
    }
}

DATABASE_ROUTERS = ['config.db_routers.TestDBRouter']


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-KR'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
